# Default values for WebApp.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- replicaCount is only used if HPA is not enabled
replicaCount: 2

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # -- this is generally the only value you will change between releases
  tag: ""

# -- name of secret in the namespace that contains docker config for image repository
imagePullSecrets: []
#  - name: regcred
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # -- If not set and create is true, a name is generated using the fullname template
  name: ""

# -- Annotations to add to the deployment
deploymentAnnotations: {}

# -- Labels to add to the deployment
deploymentLabels: {} 
#  test: does-this-work

# -- Annotations to add to the primary pod
podAnnotations:
  vault.security.banzaicloud.io/vault-addr: "http://vault.default.svc:8200" # optional, the address of the Vault service, default values is https://vault:8200
#  vault.security.banzaicloud.io/vault-role: "default" # optional, the default value is the name of the ServiceAccount the Pod runs in, in case of Secrets and ConfigMaps it is "default"
#  vault.security.banzaicloud.io/vault-skip-verify: "false" # optional, skip TLS verification of the Vault server certificate
#  vault.security.banzaicloud.io/vault-tls-secret: "vault-tls" # optional, the name of the Secret where the Vault CA cert is, if not defined it is not mounted
#  vault.security.banzaicloud.io/vault-agent: "false" # optional, if true, a Vault Agent will be started to do Vault authentication, by default not needed and vault-env will do Kubernetes Service Account based Vault authentication
#  vault.security.banzaicloud.io/vault-path: "kubernetes" # optional, the Kubernetes Auth mount path in Vault the default value is "kubernetes"

# -- Labels to add to the pod
podLabels: #{}
#  hello: world

# -- see https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
podSecurityContext:
#  runAsNonRoot: true

# -- see https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
containerSecurityContext:
#  runAsUser: 10001 # CAUTION: any value you set must be in the image
#  allowPrivilegeEscalation: false
#  runAsNonRoot: true
#  seccompProfile:
#    type: RuntimeDefault
#  capabilities:
#    drop:
#      - ALL
#    add:
#      - NET_BIND_SERVICE

# -- just the port number. the recommended value is 8080 if you control the image.
httpContainerPort: 80
# -- just the port number. the recommended value is 8443 if you control the image.
# this is only used if `service.enableHttps` is true
httpsContainerPort: 443

# -- to expose more than one port, add entries here. follows pod port syntax
# -- if `service.enableHttps` is true, then a port named https will be added to the main container
additionalContainerPorts: []
#  - name: https
#    containerPort: 8443
#    protocol: TCP

service:
  type: ClusterIP
  port: 80
  # -- if true, this will add a port on the service named `https`
  # -- the port will target a container port with the same name
  enableHttps: false
  httpsPort: 443

additionalServicePorts: []

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# -- resources for the primary container
# -- see https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
resources:
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi

# -- the HPA config
# -- see https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
autoscaling:
  enabled: no
  minReplicas: 2
  maxReplicas: 4
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# -- see https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
nodeSelector: {}

# -- see https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
tolerations: []

# see https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
affinity: {}

health:
  livenessProbe:
    httpGet:
      path: /healthz/live
      port: http
  readinessProbe:
    httpGet:
      path: /healthz/ready
      port: http

metrics:
  path: /metricsz
  port: http

appsettings: {}

# -- allows you to add additional containers
# -- this follows the pod spec on containers. see https://kubernetes.io/docs/concepts/workloads/pods/
additionalContainers: []
#  - name: "second-container"
#    securityContext: {}
#    image: ""
#    imagePullPolicy: IfNotPresent
#    ports:
#      - name: http
#        containerPort: 80
#        protocol: TCP
#    resources:
#      # limits:
#      #   cpu: 100m
#      #   memory: 128Mi
#      requests:
#        cpu: 100m
#        memory: 128Mi

volumes: []
#  - name: config-vol
#    configMap:
#      name: my-config
#  - name: secret-vol
#    secret:
#      secretName: my-secret

volumeMounts: []
#  - name: my-config
#    mountPath: /app/appsettings.production.json
#    subPath: appsettings.production.json
#    readOnly: true
#  - name: my-secret
#    mountPath: /app/appsettings.secret.json
#    subPath: appsettings.secret.json
#    readOnly: true

containerEnvironmentVariables: []
#  - name: ASPNETCORE_URLS
#    value: "http://*:8080"
#  - name: COMPlus_EnableDiagnostics
#    value: "0"
containerEnvFrom: []
  # - configMapRef:
      # name: my-config
  # - secretRef:
      # name: my-secret


migrationJob:
  enabled: false
#  enabled: true
  # -- if waitForItInInitContainer is true,
  # -- then an init container is added to the pods in the deployment to wait for the job to complete
  # -- if false, then a Helm pre-install/pre-upgrade hook is used
  # -- use true if your migrations take a long time, causing the helm hook to fail
  waitForItInInitContainer: false
  image:
    repository: ""
    pullPolicy: IfNotPresent
    # -- this value is independent of the version of the image used in the deployment of the core app
    tag: ""
  annotations: {}
  environmentVariables: []
#    - name: ConnectionStrings__DefaultConnection
#      value: vault:/secret/data/postgresql#connectionString
  containerEnvFrom: []
  # - configMapRef:
      # name: my-config
  # - secretRef:
      # name: my-secret

  command: null
#  command:
#    - sh
#    - -c
#    - something
  volumes: []
#    - name: config-vol
#      configMap:
#        name: my-config
#    - name: secret-vol
#      secret:
#        secretName: my-secret

  volumeMounts: []
#    - name: my-config
#      mountPath: /app/appsettings.production.json
#      subPath: appsettings.production.json
#      readOnly: true
#    - name: my-secret
#      mountPath: /app/appsettings.secret.json
#      subPath: appsettings.secret.json
#      readOnly: true


podDisruptionBudget:
  disabled: false
  minAvailable: 0
  maxUnavailable: 1
  unhealthyPodEvictionPolicy: IfHealthyBudget

topologySpreadConstraints:
  disabled: false
  maxSkew: 1
  topologyKey: kubernetes.io/hostname
  whenUnsatisfiable: ScheduleAnyway
